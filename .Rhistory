knitr::kable(coef_table, digits = 3, format = "latex", booktabs = TRUE,
caption = "OLS vs Quantile Regression Coefficient Comparison") %>%
kable_styling(latex_options = c("hold_position", "striped"))
coef_table
# Table: Coefficient comparison
coef_table <- tibble(
Coefficient = names(coef(ols_clean)),
OLS_Clean = coef(ols_clean),
QR_Clean = coef(qr_clean),
OLS_Outliers = coef(ols_outliers),
QR_Outliers = coef(qr_outliers)
)
knitr::kable(coef_table, digits = 3, format = "latex", booktabs = TRUE,
caption = "OLS vs Quantile Regression Coefficient Comparison") %>%
kable_styling(latex_options = c("hold_position", "striped"))
coef_table
# Plot 3: Slope vs Quantile for heteroskedastic data
data_heterosk <- simulate_data(n = 1000, heterosk = TRUE)
fits_heterosk <- lapply(seq(0.05, 0.95, 0.05), function(tau) rq(y ~ x1, tau = tau, data = data_heterosk))
slopes_heterosk <- sapply(fits_heterosk, function(fit) coef(fit)[2])
ols_slope <- coef(lm(y ~ x1, data = data_heterosk))[2]
plot_df <- tibble(tau = seq(0.05, 0.95, 0.05), slope = slopes_heterosk)
print(
ggplot(plot_df, aes(x = tau, y = slope)) +
geom_line(color = "blue") +
geom_point(color = "blue") +
geom_hline(yintercept = ols_slope, color = "red", linetype = "dashed") +
labs(x = "Quantile (tau)", y = "Slope", title = "Slope vs Quantile Level") +
theme_minimal()
)
data_heterosk <- simulate_data(n = 1000, heterosk = TRUE)
fits_heterosk <- lapply(seq(0.05, 0.95, 0.05), function(tau) rq(y ~ x1, tau = tau, data = data_heterosk))
slopes_heterosk <- sapply(fits_heterosk, function(fit) coef(fit)[2])
ols_slope <- coef(lm(y ~ x1, data = data_heterosk))[2]
plot_df <- tibble(tau = seq(0.05, 0.95, 0.05), slope = slopes_heterosk)
print(
ggplot(plot_df, aes(x = tau, y = slope)) +
geom_line(color = "blue") +
geom_point(color = "blue") +
geom_hline(yintercept = ols_slope, color = "red", linetype = "dashed") +
labs(x = "Quantile (tau)", y = "Slope", title = "Slope vs Quantile Level") +
theme_minimal()
)
data_heterosk <- simulate_data(n = 1000, heterosk = TRUE)
fits_heterosk <- lapply(seq(0.05, 0.95, 0.05), function(tau) rq(y ~ x1, tau = tau, data = data_heterosk))
slopes_heterosk <- sapply(fits_heterosk, function(fit) coef(fit)[2])
ols_slope <- coef(lm(y ~ x1, data = data_heterosk))[2]
plot_df <- tibble(tau = seq(0.05, 0.95, 0.05), slope = slopes_heterosk)
print(
ggplot(plot_df, aes(x = tau, y = slope)) +
geom_line(color = "blue") +
geom_point(color = "blue") +
geom_hline(yintercept = ols_slope, color = "red", linetype = "dashed") +
labs(x = "Quantile (tau)", y = "Slope", title = "Slope vs Quantile Level") +
theme_minimal()
)
set.seed(666)
data_heterosk <- simulate_data(n=1000, heterosk=TRUE)
fits_heterosk <- lapply(seq(0.05, 0.95, 0.05), function(tau) rq(y ~ x1, tau = tau, data = data_heterosk))
slopes_heterosk <- sapply(fits_heterosk, function(fit) coef(fit)[2])
ols_slope <- coef(lm(y ~ x1, data = data_heterosk))[2]
plot_df <- tibble(
tau = seq(0.05, 0.95, 0.05),
slope = slopes_heterosk
)
ggplot(plot_df, aes(x = tau, y = slope)) +
geom_line(color = "blue") +
geom_point(color = "blue") +
geom_hline(yintercept = ols_slope, color = "red", linetype = "dashed") +
labs(x = "Quantile (tau)", y = "Slope", title = "Slope vs Quantile Level") +
theme_minimal()
data_heterosk <- simulate_data(n = 1000, heterosk = TRUE)
fits_heterosk <- lapply(seq(0.05, 0.95, 0.05), function(tau) rq(y ~ x1, tau = tau, data = data_heterosk))
slopes_heterosk <- sapply(fits_heterosk, function(fit) coef(fit)[2])
ols_slope <- coef(lm(y ~ x1, data = data_heterosk))[2]
plot_df <- tibble(tau = seq(0.05, 0.95, 0.05), slope = slopes_heterosk)
print(
ggplot(plot_df, aes(x = tau, y = slope)) +
geom_line(color = "blue") +
geom_point(color = "blue") +
geom_hline(yintercept = ols_slope, color = "red", linetype = "dashed") +
labs(x = "Quantile (tau)", y = "Slope", title = "Slope vs Quantile Level") +
theme_minimal()
)
data_heterosk <- simulate_data(n = 1000, heterosk = TRUE)
fits_heterosk <- lapply(seq(0.05, 0.95, 0.05), function(tau) rq(y ~ x1, tau = tau, data = data_heterosk))
slopes_heterosk <- sapply(fits_heterosk, function(fit) coef(fit)[2])
ols_slope <- coef(lm(y ~ x1, data = data_heterosk))[2]
plot_df <- tibble(tau = seq(0.05, 0.95, 0.05), slope = slopes_heterosk)
print(
ggplot(plot_df, aes(x = tau, y = slope)) +
geom_line(color = "darkblue") +
geom_point(color = "darkblue") +
geom_hline(yintercept = ols_slope, color = "red", linetype = "dashed") +
labs(x = "Quantile (tau)", y = "Slope", title = "Slope vs Quantile Level") +
theme_minimal()
)
fit25 <- rq(y ~ x1, tau=0.25, data=scenarios$clean_uni)
fit50 <- rq(y ~ x1, tau=0.5, data=scenarios$clean_uni)
fit75 <- rq(y ~ x1, tau=0.75, data=scenarios$clean_uni)
anova(fit25, fit50, fit75)
# Summary of OLS vs QR under heteroskedasticity with and without outliers
n <- 500
X <- runif(n, 0, 10)
epsilon <- rnorm(n, mean = 0, sd = 1 + 0.3 * X)
Y <- 5 + 1.5 * X + epsilon
data <- data.frame(X = X, Y = Y)
ols_fit <- lm(Y ~ X, data = data)
rq_10 <- rq(Y ~ X, tau = 0.1, data = data)
rq_50 <- rq(Y ~ X, tau = 0.5, data = data)
rq_90 <- rq(Y ~ X, tau = 0.9, data = data)
# Plot 1
p1 <- ggplot(data, aes(x = X, y = Y)) +
geom_point(alpha = 0.4) +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
geom_quantile(quantiles = c(0.1, 0.5, 0.9), color = "blue", size = 0.8) +
labs(title = "OLS vs Quantile Regression Lines", y = "Y", x = "X") +
theme_minimal()
# Plot 2
taus <- seq(0.05, 0.95, by = 0.05)
slopes <- sapply(taus, function(tau) coef(rq(Y ~ X, tau = tau))[2])
p2 <- ggplot(data.frame(tau = taus, slope = slopes), aes(x = tau, y = slope)) +
geom_line(color = "blue") +
geom_hline(yintercept = coef(ols_fit)[2], linetype = "dashed", color = "red") +
labs(title = "Slope estimates across quantiles", y = "Slope", x = "Quantile (tau)") +
theme_minimal()
# Plot 3
idx <- sample(1:n, 10)
data_outlier <- data
data_outlier$Y[idx] <- data_outlier$Y[idx] + 50
ols_fit_outlier <- lm(Y ~ X, data = data_outlier)
rq_50_outlier <- rq(Y ~ X, tau = 0.5, data = data_outlier)
p3 <- ggplot(data_outlier, aes(x = X, y = Y)) +
geom_point(alpha = 0.4) +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
geom_abline(intercept = coef(rq_50_outlier)[1], slope = coef(rq_50_outlier)[2], color = "blue") +
labs(title = "Effect of Outliers: OLS vs Median QR", y = "Y", x = "X") +
theme_minimal()
# Plot 4
residuals_ols <- resid(ols_fit)
residuals_rq50 <- resid(rq_50)
residuals_df <- data.frame(
residuals = c(residuals_ols, residuals_rq50),
Method = rep(c("OLS", "QR (tau=0.5)"), each = n)
)
p4 <- ggplot(residuals_df, aes(x = residuals, fill = Method)) +
geom_histogram(alpha = 0.5, position = "identity", bins = 30) +
facet_wrap(~Method) +
labs(title = "Residuals Distribution: OLS vs QR", x = "Residuals", y = "Count") +
theme_minimal()
grid.arrange(p1, p2, p3, p4, nrow = 2)
evaluate_model <- function(y_obs, y_true, X1, label, method = "qr") {
if (method == "qr") {
fit <- rq(y_obs ~ X1, tau = 0.5)
} else {
fit <- lm(y_obs ~ X1)
}
pred <- predict(fit)
mae <- mean(abs(y_true - pred))
rmse <- sqrt(mean((y_true - pred)^2))
slope_bias <- coef(fit)[2] + 1.5  # because true beta1 = -1.5
data.frame(
Model = label,
Method = toupper(method),
Intercept = coef(fit)[1],
Slope = coef(fit)[2],
Slope_Bias = slope_bias,
MAE = mae,
RMSE = rmse
)
}
# Evaluations
evals <- bind_rows(
evaluate_model(y_gauss, y_gauss, X1, "Gaussian", method = "qr"),
evaluate_model(y_contam, y_gauss, X1, "Contaminated", method = "qr"),
evaluate_model(y_gauss, y_gauss, X1, "Gaussian", method = "ols"),
evaluate_model(y_contam, y_gauss, X1, "Contaminated", method = "ols")
)
print(knitr::kable(evals, digits = 3, caption = "OLS vs QR: Coefficients and Errors under Different Error Structures"))
# OLS vs. QR: effect of outliers
set.seed(666)
data_base <- simulate_data(n = n, heterosk = FALSE)
X1 <- data_base$x1
y_base <- data_base$y
contam_levels <- seq(0, 0.5, by = 0.02)  # desde 0% hasta 30% de outliers
estimate_slope <- function(frac, method) {
y_mod <- y_base
if (frac > 0) {
idx <- order(X1, decreasing = TRUE)[1:round(frac * n)]
y_mod[idx] <- y_mod[idx] + outlier_shift
}
fit <- if (method == "ols") lm(y_mod ~ X1) else rq(y_mod ~ X1, tau = 0.5)
coef(fit)[2]
}
results <- expand.grid(Contamination = contam_levels, Method = c("OLS", "QR"))
results$Slope <- mapply(estimate_slope, results$Contamination, tolower(results$Method))
# Plot
ggplot(results, aes(x = Contamination, y = Slope, color = Method)) +
geom_line(size = 1.2) +
geom_hline(yintercept = beta1, linetype = "dashed", color = "black") +
labs(
title = "Estimated Slope vs Outlier Contamination",
x = "Contamination Fraction",
y = expression(hat(beta)[1])
) +
theme_minimal()
```{r metrics_table, include=FALSE}
set.seed(666)
evaluate_model <- function(y_obs, y_true, X1, label, method = "qr") {
if (method == "qr") {
fit <- rq(y_obs ~ X1, tau = 0.5)
} else {
fit <- lm(y_obs ~ X1)
}
pred <- predict(fit)
mae <- mean(abs(y_true - pred))
rmse <- sqrt(mean((y_true - pred)^2))
slope_bias <- coef(fit)[2] + 1.5  # because true beta1 = -1.5
data.frame(
Model = label,
Method = toupper(method),
Intercept = coef(fit)[1],
Slope = coef(fit)[2],
Slope_Bias = slope_bias,
MAE = mae,
RMSE = rmse
)
}
# Evaluations
evals <- bind_rows(
evaluate_model(y_gauss, y_gauss, X1, "Gaussian", method = "qr"),
evaluate_model(y_contam, y_gauss, X1, "Contaminated", method = "qr"),
evaluate_model(y_gauss, y_gauss, X1, "Gaussian", method = "ols"),
evaluate_model(y_contam, y_gauss, X1, "Contaminated", method = "ols")
)
# Summary of OLS vs QR under heteroskedasticity with and without outliers
set.seed(666)
n <- 500
X <- runif(n, 0, 10)
epsilon <- rnorm(n, mean = 0, sd = 1 + 0.3 * X)
Y <- 5 + 1.5 * X + epsilon
data <- data.frame(X = X, Y = Y)
ols_fit <- lm(Y ~ X, data = data)
rq_10 <- rq(Y ~ X, tau = 0.1, data = data)
rq_50 <- rq(Y ~ X, tau = 0.5, data = data)
rq_90 <- rq(Y ~ X, tau = 0.9, data = data)
# Plot 1
p1 <- ggplot(data, aes(x = X, y = Y)) +
geom_point(alpha = 0.4) +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
geom_quantile(quantiles = c(0.1, 0.5, 0.9), color = "blue", size = 0.8) +
labs(title = "OLS vs Quantile Regression Lines", y = "Y", x = "X") +
theme_minimal()
# Plot 2
taus <- seq(0.05, 0.95, by = 0.05)
slopes <- sapply(taus, function(tau) coef(rq(Y ~ X, tau = tau))[2])
p2 <- ggplot(data.frame(tau = taus, slope = slopes), aes(x = tau, y = slope)) +
geom_line(color = "blue") +
geom_hline(yintercept = coef(ols_fit)[2], linetype = "dashed", color = "red") +
labs(title = "Slope estimates across quantiles", y = "Slope", x = "Quantile (tau)") +
theme_minimal()
# Plot 3
idx <- sample(1:n, 10)
data_outlier <- data
data_outlier$Y[idx] <- data_outlier$Y[idx] + 50
ols_fit_outlier <- lm(Y ~ X, data = data_outlier)
rq_50_outlier <- rq(Y ~ X, tau = 0.5, data = data_outlier)
p3 <- ggplot(data_outlier, aes(x = X, y = Y)) +
geom_point(alpha = 0.4) +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
geom_abline(intercept = coef(rq_50_outlier)[1], slope = coef(rq_50_outlier)[2], color = "blue") +
labs(title = "Effect of Outliers: OLS vs Median QR", y = "Y", x = "X") +
theme_minimal()
# Plot 4
residuals_ols <- resid(ols_fit)
residuals_rq50 <- resid(rq_50)
residuals_df <- data.frame(
residuals = c(residuals_ols, residuals_rq50),
Method = rep(c("OLS", "QR (tau=0.5)"), each = n)
)
p4 <- ggplot(residuals_df, aes(x = residuals, fill = Method)) +
geom_histogram(alpha = 0.5, position = "identity", bins = 30) +
facet_wrap(~Method) +
labs(title = "Residuals Distribution: OLS vs QR", x = "Residuals", y = "Count") +
theme_minimal()
grid.arrange(p1, p2, p3, p4, nrow = 2)
set.seed(666)
n <- 1000
X1 <- runif(n, 0, 10)
y_clean <- beta0 - beta1 * X1 + rnorm(n, sd = 2)
y_outliers <- y_clean
num_outliers <- round(outlier_frac * n)
out_idx <- order(X1, decreasing = TRUE)[1:num_outliers]
y_outliers[out_idx] <- y_outliers[out_idx] + outlier_shift
ols_clean <- lm(y_clean ~ X1)
qr_clean <- rq(y_clean ~ X1, tau = 0.5)
ols_outliers <- lm(y_outliers ~ X1)
qr_outliers <- rq(y_outliers ~ X1, tau = 0.5)
# Plot 1: Clean data
df_clean <- data.frame(X1 = X1, Y = y_clean)
p_1 <- ggplot(df_clean, aes(x = X1, y = Y)) +
geom_point(color = "grey") +
geom_smooth(method = "lm", se = FALSE, color = "darkred", linetype = "dashed") +
geom_quantile(quantiles = 0.5, method = "rq", formula = y ~ x, color = "blue") +
labs(title = "Clean Data: OLS vs QR (tau = 0.5)")
# Plot 2: With outliers
df_out <- data.frame(X1 = X1, Y = y_outliers)
p_2 <- ggplot(df_out, aes(x = X1, y = Y)) +
geom_point(color = "grey") +
geom_smooth(method = "lm", se = FALSE, color = "darkred", linetype = "dashed") +
geom_quantile(quantiles = 0.5, method = "rq", formula = y ~ x, color = "blue") +
labs(title = "With Outliers: OLS vs QR (tau = 0.5)")
# Combine plots
grid.arrange(p_1, p_2, nrow = 1)
# Summary of OLS vs QR under heteroskedasticity with and without outliers
set.seed(666)
n <- 500
X <- runif(n, 0, 10)
epsilon <- rnorm(n, mean = 0, sd = 1 + 0.3 * X)
Y <- 5 + 1.5 * X + epsilon
data <- data.frame(X = X, Y = Y)
ols_fit <- lm(Y ~ X, data = data)
rq_10 <- rq(Y ~ X, tau = 0.1, data = data)
rq_50 <- rq(Y ~ X, tau = 0.5, data = data)
rq_90 <- rq(Y ~ X, tau = 0.9, data = data)
# Plot 1
p1 <- ggplot(data, aes(x = X, y = Y)) +
geom_point(alpha = 0.4) +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
geom_quantile(quantiles = c(0.1, 0.5, 0.9), color = "blue", size = 0.8) +
labs(title = "OLS vs Quantile Regression Lines", y = "Y", x = "X") +
theme_minimal()
# Plot 2
taus <- seq(0.05, 0.95, by = 0.05)
slopes <- sapply(taus, function(tau) coef(rq(Y ~ X, tau = tau))[2])
p2 <- ggplot(data.frame(tau = taus, slope = slopes), aes(x = tau, y = slope)) +
geom_line(color = "blue") +
geom_hline(yintercept = coef(ols_fit)[2], linetype = "dashed", color = "red") +
labs(title = "Slope estimates across quantiles", y = "Slope", x = "Quantile (tau)") +
theme_minimal()
# Plot 3
idx <- sample(1:n, 10)
data_outlier <- data
data_outlier$Y[idx] <- data_outlier$Y[idx] + 50
ols_fit_outlier <- lm(Y ~ X, data = data_outlier)
rq_50_outlier <- rq(Y ~ X, tau = 0.5, data = data_outlier)
p3 <- ggplot(data_outlier, aes(x = X, y = Y)) +
geom_point(alpha = 0.4) +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
geom_abline(intercept = coef(rq_50_outlier)[1], slope = coef(rq_50_outlier)[2], color = "blue") +
labs(title = "Effect of Outliers: OLS vs Median QR", y = "Y", x = "X") +
theme_minimal()
# Plot 4
residuals_ols <- resid(ols_fit)
residuals_rq50 <- resid(rq_50)
residuals_df <- data.frame(
residuals = c(residuals_ols, residuals_rq50),
Method = rep(c("OLS", "QR (tau=0.5)"), each = n)
)
p4 <- ggplot(residuals_df, aes(x = residuals, fill = Method)) +
geom_histogram(alpha = 0.5, position = "identity", bins = 30) +
facet_wrap(~Method) +
labs(title = "Residuals Distribution: OLS vs QR", x = "Residuals", y = "Count") +
theme_minimal()
grid.arrange(p1, p2, p3, p4, nrow = 2)
set.seed(666)
evaluate_model <- function(y_obs, y_true, X1, label, method = "qr") {
if (method == "qr") {
fit <- rq(y_obs ~ X1, tau = 0.5)
} else {
fit <- lm(y_obs ~ X1)
}
pred <- predict(fit)
mae <- mean(abs(y_true - pred))
rmse <- sqrt(mean((y_true - pred)^2))
slope_bias <- coef(fit)[2] + 1.5  # because true beta1 = -1.5
data.frame(
Model = label,
Method = toupper(method),
Intercept = coef(fit)[1],
Slope = coef(fit)[2],
Slope_Bias = slope_bias,
MAE = mae,
RMSE = rmse
)
}
# Evaluations
evals <- bind_rows(
evaluate_model(y_gauss, y_gauss, X1, "Gaussian", method = "qr"),
evaluate_model(y_contam, y_gauss, X1, "Contaminated", method = "qr"),
evaluate_model(y_gauss, y_gauss, X1, "Gaussian", method = "ols"),
evaluate_model(y_contam, y_gauss, X1, "Contaminated", method = "ols")
)
print(knitr::kable(evals, digits = 3, caption = "OLS vs QR: Coefficients and Errors under Different Error Structures"))
print(knitr::kable(evals, digits = 3, caption = "OLS vs QR: Coefficients and Errors under Different Error Structures"))
set.seed(666)
evaluate_model <- function(y_obs, y_true, X1, label, method = "qr") {
if (method == "qr") {
fit <- rq(y_obs ~ X1, tau = 0.5)
} else {
fit <- lm(y_obs ~ X1)
}
pred <- predict(fit)
mae <- mean(abs(y_true - pred))
rmse <- sqrt(mean((y_true - pred)^2))
slope_bias <- coef(fit)[2] + 1.5  # because true beta1 = -1.5
data.frame(
Model = label,
Method = toupper(method),
Intercept = coef(fit)[1],
Slope = coef(fit)[2],
Slope_Bias = slope_bias,
MAE = mae,
RMSE = rmse
)
}
# Evaluations
evals <- bind_rows(
evaluate_model(y_clean, y_clean, X1, "Gaussian", method = "qr"),
evaluate_model(y_outliers, y_clean, X1, "Contaminated", method = "qr"),
evaluate_model(y_clean, y_clean, X1, "Gaussian", method = "ols"),
evaluate_model(y_outliers, y_clean, X1, "Contaminated", method = "ols")
)
print(knitr::kable(evals, digits = 3, caption = "OLS vs QR: Coefficients and Errors under Different Error Structures"))
print(knitr::kable(evals, digits = 3, caption = "OLS vs QR: Coefficients and Errors under Different Error Structures"))
set.seed(666)
evaluate_model <- function(y_obs, y_true, X1, label, method = "qr") {
if (method == "qr") {
fit <- rq(y_obs ~ X1, tau = 0.5)
} else {
fit <- lm(y_obs ~ X1)
}
pred <- predict(fit)
mae <- mean(abs(y_true - pred))
rmse <- sqrt(mean((y_true - pred)^2))
slope_bias <- coef(fit)[2] + 1.5  # because true beta1 = -1.5
data.frame(
Model = label,
Method = toupper(method),
Intercept = coef(fit)[1],
Slope = coef(fit)[2],
Slope_Bias = slope_bias,
MAE = mae,
RMSE = rmse
)
}
# Evaluations
evals <- bind_rows(
evaluate_model(y_clean, y_clean, X1, "Gaussian", method = "qr"),
evaluate_model(y_outliers, y_clean, X1, "Contaminated", method = "qr"),
evaluate_model(y_clean, y_clean, X1, "Gaussian", method = "ols"),
evaluate_model(y_outliers, y_clean, X1, "Contaminated", method = "ols")
)
knitr::kable(evals, digits = 3, format = "latex", booktabs = TRUE,
caption = "OLS vs Quantile Regression: Coefficients and Error Metrics under Different Error Structures") %>%
kable_styling(latex_options = c("hold_position", "striped"))
# OLS vs. QR: effect of outliers
set.seed(666)
data_base <- simulate_data(n = n, heterosk = FALSE)
X1 <- data_base$x1
y_base <- data_base$y
contam_levels <- seq(0, 0.5, by = 0.02)  # desde 0% hasta 30% de outliers
estimate_slope <- function(frac, method) {
y_mod <- y_base
if (frac > 0) {
idx <- order(X1, decreasing = TRUE)[1:round(frac * n)]
y_mod[idx] <- y_mod[idx] + outlier_shift
}
fit <- if (method == "ols") lm(y_mod ~ X1) else rq(y_mod ~ X1, tau = 0.5)
coef(fit)[2]
}
results <- expand.grid(Contamination = contam_levels, Method = c("OLS", "QR"))
results$Slope <- mapply(estimate_slope, results$Contamination, tolower(results$Method))
# Plot
ggplot(results, aes(x = Contamination, y = Slope, color = Method)) +
geom_line(size = 1.2) +
geom_hline(yintercept = beta1, linetype = "dashed", color = "black") +
labs(
title = "Estimated Slope vs Outlier Contamination",
x = "Contamination Fraction",
y = expression(hat(beta)[1])
) +
theme_minimal()
rm(list=ls())
set.seed(666)
evaluate_model <- function(y_obs, y_true, X1, label, method = "qr") {
if (method == "qr") {
fit <- rq(y_obs ~ X1, tau = 0.5)
} else {
fit <- lm(y_obs ~ X1)
}
pred <- predict(fit)
mae <- mean(abs(y_true - pred))
rmse <- sqrt(mean((y_true - pred)^2))
slope_bias <- coef(fit)[2] + 1.5  # because true beta1 = -1.5
data.frame(
Model = label,
Method = toupper(method),
Intercept = coef(fit)[1],
Slope = coef(fit)[2],
Slope_Bias = slope_bias,
MAE = mae,
RMSE = rmse
)
}
# Evaluations
evals <- bind_rows(
evaluate_model(y_clean, y_clean, X1, "Gaussian", method = "qr"),
evaluate_model(y_outliers, y_clean, X1, "Contaminated", method = "qr"),
evaluate_model(y_clean, y_clean, X1, "Gaussian", method = "ols"),
evaluate_model(y_outliers, y_clean, X1, "Contaminated", method = "ols")
)
