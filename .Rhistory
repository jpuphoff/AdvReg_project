set.seed(666)
data_heterosk <- simulate_data(n=1000, heterosk=TRUE)
fits_heterosk <- lapply(seq(0.05, 0.95, 0.05), function(tau) rq(y ~ x1, tau = tau, data = data_heterosk))
slopes_heterosk <- sapply(fits_heterosk, function(fit) coef(fit)[2])
ols_slope <- coef(lm(y ~ x1, data = data_heterosk))[2]
plot_df <- tibble(
tau = seq(0.05, 0.95, 0.05),
slope = slopes_heterosk
)
ggplot(plot_df, aes(x = tau, y = slope)) +
geom_line(color = "blue") +
geom_point(color = "blue") +
geom_hline(yintercept = ols_slope, color = "red", linetype = "dashed") +
labs(x = "Quantile (tau)", y = "Slope", title = "Slope vs Quantile Level") +
theme_minimal()
fit25 <- rq(y ~ x1, tau=0.25, data=scenarios$clean_multi)
fit50 <- rq(y ~ x1, tau=0.5, data=scenarios$clean_multi)
fit75 <- rq(y ~ x1, tau=0.75, data=scenarios$clean_multi)
anova_clean <- anova(fit25, fit50, fit75)
fit25_h <- rq(y ~ x1, tau=0.25, data=scenarios$outlier_multi)
fit50_h <- rq(y ~ x1, tau=0.5, data=scenarios$outlier_multi)
fit75_h <- rq(y ~ x1, tau=0.75, data=scenarios$outlier_multi)
anova_outier <- anova(fit25_h, fit50_h, fit75_h)
# # Tables
# kbl(anova_clean, caption = "ANOVA Test for Equality of Slopes across Quantiles (Clean Data)") %>%
#   kable_styling(latex_options = c("hold_position", "striped"))
#
# kbl(anova_outliers, caption = "ANOVA Test for Equality of Slopes across Quantiles (Outlier Data)") %>%
#   kable_styling(latex_options = c("hold_position", "striped"))
library(quantreg)
library(gridExtra)
library(dplyr)
# Simulate basic heteroskedastic data
set.seed(666)
n <- 500
X <- runif(n, 0, 10)
epsilon <- rnorm(n, mean = 0, sd = 1 + 0.3 * X)
Y <- 5 + 1.5 * X + epsilon
data <- data.frame(X = X, Y = Y)
# Fit models
ols_fit <- lm(Y ~ X, data = data)
rq_10 <- rq(Y ~ X, tau = 0.1, data = data)
rq_50 <- rq(Y ~ X, tau = 0.5, data = data)
rq_90 <- rq(Y ~ X, tau = 0.9, data = data)
# Plot 1: Scatterplot + regression lines
p1 <- ggplot(data, aes(x = X, y = Y)) +
geom_point(alpha = 0.4) +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
geom_quantile(quantiles = c(0.1, 0.5, 0.9), color = "blue", size = 0.8) +
labs(title = "OLS vs Quantile Regression Lines", y = "Y", x = "X") +
theme_minimal()
# Plot 2: Slope across quantiles
taus <- seq(0.05, 0.95, by = 0.05)
slopes <- sapply(taus, function(tau) coef(rq(Y ~ X, tau = tau))[2])
p2 <- ggplot(data.frame(tau = taus, slope = slopes), aes(x = tau, y = slope)) +
geom_line(color = "blue") +
geom_hline(yintercept = coef(ols_fit)[2], linetype = "dashed", color = "red") +
labs(title = "Slope estimates across quantiles", y = "Slope", x = "Quantile (tau)") +
theme_minimal()
# Plot 3: Robustness to outliers
data_outlier <- data
idx <- sample(1:n, 10)
data_outlier$Y[idx] <- data_outlier$Y[idx] + 50  # Add strong outliers
ols_fit_outlier <- lm(Y ~ X, data = data_outlier)
rq_50_outlier <- rq(Y ~ X, tau = 0.5, data = data_outlier)
p3 <- ggplot(data_outlier, aes(x = X, y = Y)) +
geom_point(alpha = 0.4) +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
geom_abline(intercept = coef(rq_50_outlier)[1], slope = coef(rq_50_outlier)[2], color = "blue") +
labs(title = "Effect of Outliers: OLS vs Median QR", y = "Y", x = "X") +
theme_minimal()
# Plot 4: Residuals histograms
residuals_ols <- resid(ols_fit)
residuals_rq50 <- resid(rq_50)
residuals_df <- data.frame(
residuals = c(residuals_ols, residuals_rq50),
Method = rep(c("OLS", "QR (tau=0.5)"), each = n)
)
p4 <- ggplot(residuals_df, aes(x = residuals, fill = Method)) +
geom_histogram(alpha = 0.5, position = "identity", bins = 30) +
facet_wrap(~Method) +
labs(title = "Residuals Distribution: OLS vs QR", x = "Residuals", y = "Count") +
theme_minimal()
# Arrange in grid (2x2 layout)
grid.arrange(p1, p2, p3, p4, nrow = 2)
rmarkdown::render("ADR_project.Rmd", clean = FALSE, quiet = FALSE)
library(quantreg)
library(ggplot2)
library(dplyr)
library(tidyr)
library(gridExtra)
library(kableExtra)
library(tibble)
# Ajustes
set.seed(666)
beta0 <- 5
beta1 <- 1.5
beta2 <- -1.0
n_sim <- 100
outlier_frac <- 0.02
outlier_shift <- 30
tau_levels <- c(0.025, 0.25, 0.5, 0.75, 0.975)
# Función para simular datos
simulate_data <- function(n = 200, multivariate = FALSE, heterosk = FALSE) {
x1 <- runif(n, 0, 10)
x2 <- if (multivariate) runif(n, 0, 10) else rep(0, n)
sd_e <- if (heterosk) (1 + 0.6 * x1) else 2
e <- rnorm(n, mean = 0, sd = sd_e)
y <- beta0 + beta1 * x1 + beta2 * x2 + e
data.frame(y = y, x1 = x1, x2 = x2)
}
# Ajustes: Define parámetros base del modelo y niveles de cuantiles
set.seed(666)
beta0 <- 5
beta1 <- 1.5
beta2 <- -1.0
n_sim <- 100
outlier_frac <- 0.02
outlier_shift <- 30
tau_levels <- c(0.025, 0.25, 0.5, 0.75, 0.975)
rm(list=ls())
library(quantreg)
library(ggplot2)
library(dplyr)
library(tidyr)
library(gridExtra)
library(kableExtra)
library(tibble)
# Ajustes: Define parámetros base del modelo y niveles de cuantiles
set.seed(666)
beta0 <- 5
beta1 <- 1.5
beta2 <- -1.0
n_sim <- 100
outlier_frac <- 0.02
outlier_shift <- 30
tau_levels <- c(0.025, 0.25, 0.5, 0.75, 0.975)
# Función para simular datos: Genera datos sintéticos (con o sin heterocedasticidad / multivariables)
simulate_data <- function(n = 200, multivariate = FALSE, heterosk = FALSE) {
x1 <- runif(n, 0, 10)
x2 <- if (multivariate) runif(n, 0, 10) else rep(0, n)
sd_e <- if (heterosk) (1 + 0.6 * x1) else 2
e <- rnorm(n, mean = 0, sd = sd_e)
y <- beta0 + beta1 * x1 + beta2 * x2 + e
data.frame(y = y, x1 = x1, x2 = x2)
}
# Función para añadir un outlier extremo
add_high_leverage_point <- function(data) {
new_x1 <- max(data$x1)
new_x2 <- mean(data$x2) + 1
new_y <- max(data$y) * 20
new_point <- data.frame(y = new_y, x1 = new_x1, x2 = new_x2)
rbind(data, new_point)
}
# Función para ajustar modelos OLS y QR
fit_models <- function(data, multivariate = FALSE) {
if (multivariate) {
ols <- lm(y ~ x1 + x2, data = data)
qrs <- lapply(tau_levels, function(tau) rq(y ~ x1 + x2, tau = tau, data = data))
} else {
ols <- lm(y ~ x1, data = data)
qrs <- lapply(tau_levels, function(tau) rq(y ~ x1, tau = tau, data = data))
}
list(ols = ols, qrs = qrs)
}
# Crea datasets: limpio y con outlier
multivariate_data <- simulate_data(n = 500, multivariate = TRUE, heterosk = TRUE)
multivariate_data_outlier <- add_high_leverage_point(multivariate_data)
# Aplica modelos a ambos datasets
scenarios <- list(
clean_multi = multivariate_data,
outlier_multi = multivariate_data_outlier
)
models <- list(
clean_multi = fit_models(scenarios$clean_multi, multivariate = TRUE),
outlier_multi = fit_models(scenarios$outlier_multi, multivariate = TRUE)
)
library(quantreg)
library(ggplot2)
library(dplyr)
library(tidyr)
library(gridExtra)
library(kableExtra)
library(tibble)
set.seed(666)
theme_set(theme_bw())
theme_update(
panel.background = element_rect(fill = "transparent", colour = NA),
plot.background = element_rect(fill = "transparent", colour = NA)
)
simulate_data <- function(n = 200, multivariate = FALSE, heterosk = FALSE) {
x1 <- runif(n, 0, 10)
x2 <- if (multivariate) runif(n, 0, 10) else rep(0, n)
sd_e <- if (heterosk) (1 + 0.6 * x1) else 2
e <- rnorm(n, 0, sd_e)
y <- 5 + 1.5 * x1 - 1 * x2 + e
data.frame(y, x1, x2)
}
add_high_leverage_point <- function(data) {
new_point <- data.frame(
y = max(data$y) * 20,
x1 = max(data$x1),
x2 = mean(data$x2) + 1
)
rbind(data, new_point)
}
fit_models <- function(data, multivariate = FALSE, tau_levels = c(0.025, 0.25, 0.5, 0.75, 0.975)) {
if (multivariate) {
ols <- lm(y ~ x1 + x2, data)
qrs <- lapply(tau_levels, function(tau) rq(y ~ x1 + x2, tau = tau, data = data))
} else {
ols <- lm(y ~ x1, data)
qrs <- lapply(tau_levels, function(tau) rq(y ~ x1, tau = tau, data = data))
}
list(ols = ols, qrs = qrs)
}
multi_data <- simulate_data(n = 500, multivariate = TRUE, heterosk = TRUE)
multi_data_outlier <- add_high_leverage_point(multi_data)
models_clean <- fit_models(multi_data, multivariate = TRUE)
models_outlier <- fit_models(multi_data_outlier, multivariate = TRUE)
summary(multi_data)
models_clean <- fit_models(multi_data, multivariate = TRUE)
models_outlier <- fit_models(multi_data_outlier, multivariate = TRUE)
# 1. Comparación OLS vs QR (mediana)
plot1 <- ggplot(multi_data, aes(x = x1, y = y)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
geom_quantile(quantiles = 0.5, color = "blue") +
labs(title = "OLS vs Quantile Regression (Clean)", x = "x1", y = "y")
plot2 <- ggplot(multi_data_outlier, aes(x = x1, y = y)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
geom_quantile(quantiles = 0.5, color = "blue") +
labs(title = "OLS vs Quantile Regression (With Outlier)", x = "x1", y = "y")
# 2. Pendiente vs cuantiles (heterocedasticidad)
data_heterosk <- simulate_data(n = 1000, heterosk = TRUE)
taus <- seq(0.05, 0.95, 0.05)
fits <- lapply(taus, function(t) rq(y ~ x1, tau = t, data = data_heterosk))
slopes <- sapply(fits, function(m) coef(m)[2])
ols_slope <- coef(lm(y ~ x1, data = data_heterosk))[2]
plot3 <- tibble(tau = taus, slope = slopes) %>%
ggplot(aes(x = tau, y = slope)) +
geom_line(color = "blue") +
geom_point(color = "blue") +
geom_hline(yintercept = ols_slope, linetype = "dashed", color = "red") +
labs(title = "Slope vs Quantile (Heteroskedastic Data)", x = "Tau", y = "Slope")
# 3. Panel con 4 visualizaciones
set.seed(666)
n <- 500
X <- runif(n, 0, 10)
epsilon <- rnorm(n, 0, 1 + 0.3 * X)
Y <- 5 + 1.5 * X + epsilon
df <- data.frame(X, Y)
p1 <- ggplot(df, aes(X, Y)) +
geom_point(alpha = 0.4) +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
geom_quantile(quantiles = c(0.1, 0.5, 0.9), color = "blue") +
labs(title = "OLS vs QR Lines")
p2 <- data.frame(tau = taus, slope = slopes) %>%
ggplot(aes(tau, slope)) +
geom_line(color = "blue") +
geom_hline(yintercept = coef(lm(Y ~ X))[2], linetype = "dashed", color = "red") +
labs(title = "Slope across Quantiles")
df_outlier <- df
df_outlier$Y[sample(n, 10)] <- df_outlier$Y[sample(n, 10)] + 50
p3 <- ggplot(df_outlier, aes(X, Y)) +
geom_point(alpha = 0.4) +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
geom_abline(intercept = coef(rq(Y ~ X, tau = 0.5, data = df_outlier))[1],
slope = coef(rq(Y ~ X, tau = 0.5, data = df_outlier))[2],
color = "blue") +
labs(title = "Outliers: OLS vs Median QR")
res_df <- data.frame(
residuals = c(resid(lm(Y ~ X, data = df)), resid(rq(Y ~ X, tau = 0.5))),
Method = rep(c("OLS", "QR (0.5)"), each = n)
)
p4 <- ggplot(res_df, aes(residuals, fill = Method)) +
geom_histogram(position = "identity", alpha = 0.5, bins = 30) +
facet_wrap(~Method) +
labs(title = "Residual Distributions")
plot3
plot1
plot2
set.seed(666)
#------ Simulation Functions -------------------------------------------------#
###############################################################################
# Core functions for simulation, model fitting, and outlier injection
beta0 <- 5; beta1 <- 1.5; beta2 <- -1.0
n_sim <- 100
outlier_frac <- 0.02
outlier_shift <- 30
tau_levels <- c(0.025, 0.25, 0.5, 0.75, 0.975)
# Core functions for simulation, model fitting, and outlier injection
beta0 <- 5; beta1 <- 1.5; beta2 <- -1.0
n_sim <- 100
outlier_frac <- 0.02
outlier_shift <- 30
tau_levels <- c(0.025, 0.25, 0.5, 0.75, 0.975)
simulate_data <- function(n = 200, multivariate = FALSE, heterosk = FALSE) {
x1 <- runif(n, 0, 10)
x2 <- if (multivariate) runif(n, 0, 10) else rep(0, n)
sd_e <- if (heterosk) (1 + 0.6 * x1) else 2
e <- rnorm(n, mean = 0, sd = sd_e)
y <- beta0 + beta1 * x1 + beta2 * x2 + e
data.frame(y = y, x1 = x1, x2 = x2)
}
add_high_leverage_point <- function(data) {
new_x1 <- max(data$x1)
new_x2 <- mean(data$x2) + 1
new_y <- max(data$y) * 20
new_point <- data.frame(y = new_y, x1 = new_x1, x2 = new_x2)
rbind(data, new_point)
}
fit_models <- function(data, multivariate = FALSE) {
if (multivariate) {
ols <- lm(y ~ x1 + x2, data = data)
qrs <- lapply(tau_levels, function(tau) rq(y ~ x1 + x2, tau = tau, data = data))
} else {
ols <- lm(y ~ x1, data = data)
qrs <- lapply(tau_levels, function(tau) rq(y ~ x1, tau = tau, data = data))
}
list(ols = ols, qrs = qrs)
}
###############################################################################
#--- 4. Scenarios and Model Estimation ---------------------------------------#
###############################################################################
# Generate clean and outlier-contaminated datasets and fit models
multivariate_data <- simulate_data(n = 500, multivariate = TRUE, heterosk = TRUE)
multivariate_data_outlier <- add_high_leverage_point(multivariate_data)
scenarios <- list(
clean_multi = multivariate_data,
outlier_multi = multivariate_data_outlier
)
models <- list(
clean_multi = fit_models(scenarios$clean_multi, multivariate = TRUE),
outlier_multi = fit_models(scenarios$outlier_multi, multivariate = TRUE)
)
###############################################################################
#--- 5. Univariate Simulation and Basic Analysis -----------------------------#
###############################################################################
set.seed(123)
n <- 1000
X1 <- runif(n, 0, 10)
y_clean <- beta0 - beta1 * X1 + rnorm(n, sd = 2)
y_outliers <- y_clean
num_outliers <- round(outlier_frac * n)
out_idx <- order(X1, decreasing = TRUE)[1:num_outliers]
y_outliers[out_idx] <- y_outliers[out_idx] + outlier_shift
ols_clean <- lm(y_clean ~ X1)
qr_clean <- rq(y_clean ~ X1, tau = 0.5)
ols_outliers <- lm(y_outliers ~ X1)
qr_outliers <- rq(y_outliers ~ X1, tau = 0.5)
###############################################################################
#--- 6. Plots and Tables -----------------------------------------------------#
###############################################################################
# Plot 1: Clean data OLS vs QR
plot(X1, y_clean, xlab = "X1", ylab = "Y", pch = 16, cex = 0.6, col = "grey")
abline(qr_clean, col = "blue", lwd = 1.5)
abline(ols_clean, col = "red", lwd = 3, lty = 2)
legend("topleft", legend = c("QR tau = 0.5", "OLS"), col = c("blue", "red"), lty = c(1, 2))
# Plot 2: Outliers impact on OLS vs QR
plot(X1, y_outliers, xlab = "X1", ylab = "Y", pch = 16, cex = 0.6, col = "grey")
abline(qr_outliers, col = "blue", lwd = 1.5)
abline(ols_outliers, col = "red", lwd = 3, lty = 2)
legend("topleft", legend = c("QR tau = 0.5", "OLS"), col = c("blue", "red"), lty = c(1, 2))
# Table: Coefficient comparison
coef_table <- tibble(
Coefficient = names(coef(ols_clean)),
OLS_Clean = coef(ols_clean),
QR_Clean = coef(qr_clean),
OLS_Outliers = coef(ols_outliers),
QR_Outliers = coef(qr_outliers)
)
print(knitr::kable(coef_table, digits = 3, caption = "OLS vs QR Coefficient Comparison"))
# Plot 3: Slope vs Quantile for heteroskedastic data
data_heterosk <- simulate_data(n = 1000, heterosk = TRUE)
fits_heterosk <- lapply(seq(0.05, 0.95, 0.05), function(tau) rq(y ~ x1, tau = tau, data = data_heterosk))
slopes_heterosk <- sapply(fits_heterosk, function(fit) coef(fit)[2])
ols_slope <- coef(lm(y ~ x1, data = data_heterosk))[2]
plot_df <- tibble(tau = seq(0.05, 0.95, 0.05), slope = slopes_heterosk)
print(
ggplot(plot_df, aes(x = tau, y = slope)) +
geom_line(color = "blue") +
geom_point(color = "blue") +
geom_hline(yintercept = ols_slope, color = "red", linetype = "dashed") +
labs(x = "Quantile (tau)", y = "Slope", title = "Slope vs Quantile Level") +
theme_minimal()
)
###############################################################################
#--- 7. Optional: Grid Summary Plots ----------------------------------------#
###############################################################################
# Summary of OLS vs QR under heteroskedasticity with and without outliers
n <- 500
X <- runif(n, 0, 10)
epsilon <- rnorm(n, mean = 0, sd = 1 + 0.3 * X)
Y <- 5 + 1.5 * X + epsilon
data <- data.frame(X = X, Y = Y)
ols_fit <- lm(Y ~ X, data = data)
rq_10 <- rq(Y ~ X, tau = 0.1, data = data)
rq_50 <- rq(Y ~ X, tau = 0.5, data = data)
rq_90 <- rq(Y ~ X, tau = 0.9, data = data)
# Plot 1
p1 <- ggplot(data, aes(x = X, y = Y)) +
geom_point(alpha = 0.4) +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
geom_quantile(quantiles = c(0.1, 0.5, 0.9), color = "blue", size = 0.8) +
labs(title = "OLS vs Quantile Regression Lines", y = "Y", x = "X") +
theme_minimal()
# Plot 2
taus <- seq(0.05, 0.95, by = 0.05)
slopes <- sapply(taus, function(tau) coef(rq(Y ~ X, tau = tau))[2])
p2 <- ggplot(data.frame(tau = taus, slope = slopes), aes(x = tau, y = slope)) +
geom_line(color = "blue") +
geom_hline(yintercept = coef(ols_fit)[2], linetype = "dashed", color = "red") +
labs(title = "Slope estimates across quantiles", y = "Slope", x = "Quantile (tau)") +
theme_minimal()
# Plot 3
idx <- sample(1:n, 10)
data_outlier <- data
data_outlier$Y[idx] <- data_outlier$Y[idx] + 50
ols_fit_outlier <- lm(Y ~ X, data = data_outlier)
rq_50_outlier <- rq(Y ~ X, tau = 0.5, data = data_outlier)
p3 <- ggplot(data_outlier, aes(x = X, y = Y)) +
geom_point(alpha = 0.4) +
geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
geom_abline(intercept = coef(rq_50_outlier)[1], slope = coef(rq_50_outlier)[2], color = "blue") +
labs(title = "Effect of Outliers: OLS vs Median QR", y = "Y", x = "X") +
theme_minimal()
# Plot 4
residuals_ols <- resid(ols_fit)
residuals_rq50 <- resid(rq_50)
residuals_df <- data.frame(
residuals = c(residuals_ols, residuals_rq50),
Method = rep(c("OLS", "QR (tau=0.5)"), each = n)
)
p4 <- ggplot(residuals_df, aes(x = residuals, fill = Method)) +
geom_histogram(alpha = 0.5, position = "identity", bins = 30) +
facet_wrap(~Method) +
labs(title = "Residuals Distribution: OLS vs QR", x = "Residuals", y = "Count") +
theme_minimal()
grid.arrange(p1, p2, p3, p4, nrow = 2)
?runif
###############################################################################
#--- Quantile Regression Sensitivity to Outliers Under Different Errors ---#
###############################################################################
set.seed(666)
tau <- 0.5
# Function to fit QR and compute MAE
evaluate_qr <- function(y, X1, true_y, label) {
model <- rq(y ~ X1, tau = tau)
pred <- predict(model)
mae <- mean(abs(true_y - pred))
data.frame(Model = label, MAE = mae, Intercept = coef(model)[1], Slope = coef(model)[2])
}
results <- list()
# Scenario 1: Homoscedastic Gaussian
e1 <- rnorm(n, 0, 2)
y1 <- beta0 - beta1 * X1 + e1
results[[1]] <- evaluate_qr(y1, X1, y1, "QR - Gaussian")
# Scenario 2: Contaminated
y2 <- y1
out_idx2 <- order(X1, decreasing = TRUE)[1:round(0.05 * n)]
y2[out_idx2] <- y2[out_idx2] + 50
results[[2]] <- evaluate_qr(y2, X1, y1, "QR - Contaminated")
# Scenario 3: Heteroskedastic
sd_e3 <- 1 + 0.2 * X1
e3 <- rnorm(n, 0, sd = sd_e3)
y3 <- beta0 - beta1 * X1 + e3
results[[3]] <- evaluate_qr(y3, X1, y3, "QR - Heteroskedastic")
# Combine results
qr_eval_df <- do.call(rbind, results)
# Gaussian (homoscedastic)
e_gauss <- rnorm(n, 0, 2)
y_gauss <- beta0 - beta1 * X1 + e_gauss
eval_gauss <- evaluate_qr(y_obs = y_gauss, y_true = y_gauss, X1 = X1, label = "QR - Gaussian")
# QR estimation and MAE evaluation function
evaluate_qr <- function(y_obs, y_true, X1, label) {
fit <- rq(y_obs ~ X1, tau = 0.5)
pred <- predict(fit)
mae <- mean(abs(y_true - pred))
data.frame(
Model = label,
Intercept = coef(fit)[1],
Slope = coef(fit)[2],
MAE = mae
)
}
# Gaussian (homoscedastic)
e_gauss <- rnorm(n, 0, 2)
y_gauss <- beta0 - beta1 * X1 + e_gauss
eval_gauss <- evaluate_qr(y_obs = y_gauss, y_true = y_gauss, X1 = X1, label = "QR - Gaussian")
# Contaminated
y_contam <- y_gauss
contam_idx <- order(X1, decreasing = TRUE)[1:round(0.05 * n)]
y_contam[contam_idx] <- y_contam[contam_idx] + 50
eval_contam <- evaluate_qr(y_obs = y_contam, y_true = y_gauss, X1 = X1, label = "QR - Contaminated")
# Heteroskedastic
sd_hetero <- 1 + 0.2 * X1
e_hetero <- rnorm(n, 0, sd = sd_hetero)
y_hetero <- beta0 - beta1 * X1 + e_hetero
eval_hetero <- evaluate_qr(y_obs = y_hetero, y_true = y_hetero, X1 = X1, label = "QR - Heteroskedastic")
# Combine results
qr_eval_all <- bind_rows(eval_gauss, eval_contam, eval_hetero)
print(knitr::kable(qr_eval_all, digits = 3, caption = "QR Estimates and MAE under Different Error Structures"))
# Plots
par(mfrow = c(1, 3))
plot(X1, y_gauss, main = "QR - Gaussian", xlab = "X1", ylab = "Y", pch = 16, col = rgb(0, 0, 0, 0.3))
abline(rq(y_gauss ~ X1, tau = 0.5), col = "blue", lwd = 2)
plot(X1, y_contam, main = "QR - Contaminated", xlab = "X1", ylab = "Y", pch = 16, col = rgb(0, 0, 0, 0.3))
abline(rq(y_contam ~ X1, tau = 0.5), col = "blue", lwd = 2)
plot(X1, y_hetero, main = "QR - Heteroskedastic", xlab = "X1", ylab = "Y", pch = 16, col = rgb(0, 0, 0, 0.3))
abline(rq(y_hetero ~ X1, tau = 0.5), col = "blue", lwd = 2)
